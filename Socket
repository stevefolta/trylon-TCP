trylon Socket

new: port
	socket = Socket new: nil port: port string
	socket listen: default-backlog
	return socket

to: address port: port
	return Socket new: address string port: port string

close
accept

send: message
	send-chunk: message
	end-message
send-chunk: message
	for item in message
		send-raw: item string
end-message
	send-raw: "\r\n"



##### Implementation #####

fields socket

default-backlog = 128

c-preamble
	#include <sys/types.h>
	#include <sys/socket.h>
	#include <netdb.h>
	#include <string.h>

	static void verify_socket(obj_ this_)
	{
		UsingMethod_(socket_not_open_error)
		if (Not_(Field_(socket)))
			Call_(socket_not_open_error, this_);
	}

	static void check_posix_error(obj_ this_, int value, char* call_name)
	{
		UsingMethod_(posix_error_co_)
		if (value == -1)
			Call_(posix_error_co_, this_, BuildString_(call_name));
	}


c-fn create: address port: port
	struct addrinfo hints;
	struct addrinfo* addrResult;
	struct addrinfo* addr;
	int result;
	int socketID;
	UsingMethod_(address_error_co_)

	/* Get the address. */
	memset(&hints, 0, sizeof(struct addrinfo));
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;
	if (address == nil)
		hints.ai_flags = AI_PASSIVE;
	result =
		getaddrinfo(
			(address ? CString_(address) : nil), 
			(port ? CString_(port) : nil),
			&hints, &addrResult);
	if (result != 0)
		Call_(address_error_co_, this_, BuildString_(gai_strerror(result)));
	
	/* Open the socket, using the address. */
	for (addr = addrResult; addr != nil; addr = addr->ai_next) {
		socketID = socket(addr->ai_family, addr->ai_socktype, addr->ai_protocol);
		if (socketID == -1)
			continue;

		if (address == nil) {
			/* This is a listening socket, so bind it. */
			/* SO_REUSEADDR lets us run the program more than once in a row. */
			int reuseLocal = 1;
			setsockopt(socketID, SOL_SOCKET, SO_REUSEADDR, &reuseLocal, sizeof(reuseLocal));
			result = bind(socketID, addr->ai_addr, addr->ai_addrlen);
			}
		else {
			/* This is a connecting socket, so connect. */
			result = connect(socketID, addr->ai_addr, addr->ai_addrlen);
			}
		if (result == 0)
			break;

		/* Failed, try again. */
		close(socketID);
		}

	freeaddrinfo(addrResult);

	/* Failed? */
	check_posix_error(this_, result, (address == nil ? "bind" : "connect"));

	/* Succeeded. */
	Field_(socket) = BuildInt_(socketID);


c-fn close
	if (Field_(socket)) {
		close(IntValue_(Field_(socket)));
		Field_(socket) = nil;
		}

destroy
	close


c-fn listen: backlog
	int result;
	verify_socket(this_);
	result = listen(IntValue_(Field_(socket)), IntValue_(backlog));
	check_posix_error(this_, result, "listen");

c-fn accept
	UsingMethod_(new_for_socket_co_)
	int new_socket;
	verify_socket(this_);
	new_socket = accept(IntValue_(Field_(socket)), NULL, 0);
	check_posix_error(this_, new_socket, "accept");
	return Call_(new_for_socket_co_, this_, BuildInt_(new_socket));


c-fn send-raw: string
	UsingMethod_(start) UsingMethod_(stopper)
	char* start = BytePtrValue_(Call_(start, string));
	char* stopper = BytePtrValue_(Call_(stopper, string));
	ssize_t bytes_sent;
	verify_socket(this_);
	bytes_sent = send(IntValue_(Field_(socket)), start, stopper - start, 0);
	check_posix_error(this_, bytes_sent, "send");


create-for-socket: socket
	this socket = socket


address-error: message
	error: ("Couldn't find address: ", message, ".")
socket-not-open-error
	error: "Socket is not open."
posix-error: call-name
	throw PosixError new: call-name


class PosixError
	field call-name

	create: call-name
		this call-name = call-name

	message
		string = StringBuilder new
		for item in ('Error in "', call-name, '()".')
			string += item string
		return string


